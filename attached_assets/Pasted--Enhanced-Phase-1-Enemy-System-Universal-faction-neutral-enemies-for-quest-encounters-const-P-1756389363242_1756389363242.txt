// Enhanced Phase 1 Enemy System
// Universal, faction-neutral enemies for quest encounters

const PHASE_1_ENEMIES = [
    // Forest/Nature Creatures
    {
        id: 'forest_goblin',
        name: 'Forest Goblin',
        emoji: 'üë∫',
        description: 'A small, cunning goblin that lurks in the forest shadows',
        baseStats: {
            hp: 75,
            atk: 16,
            def: 8,
            spd: 14
        },
        rewards: {
            xp: 12,
            coins: 8
        },
        habitat: ['gathering', 'community', 'errand'],
        combatStyle: 'agile', // Focuses on speed and dodging
        specialAbilities: [
            {
                name: 'Dirty Trick',
                chance: 0.15,
                description: 'Throws dirt to reduce player accuracy',
                effect: 'debuff'
            }
        ],
        weaknesses: ['fire', 'light'],
        resistances: ['poison', 'earth']
    },
    {
        id: 'wild_wolf',
        name: 'Wild Wolf',
        emoji: 'üê∫',
        description: 'A fierce wolf with sharp fangs and pack hunting instincts',
        baseStats: {
            hp: 85,
            atk: 20,
            def: 6,
            spd: 18
        },
        rewards: {
            xp: 15,
            coins: 10
        },
        habitat: ['hunting', 'training', 'protection'],
        combatStyle: 'aggressive',
        specialAbilities: [
            {
                name: 'Pack Howl',
                chance: 0.12,
                description: 'Howls to intimidate and reduce player attack',
                effect: 'debuff'
            },
            {
                name: 'Bite Rush',
                chance: 0.18,
                description: 'Quick consecutive bites',
                effect: 'multi_attack'
            }
        ],
        weaknesses: ['fire', 'loud_noise'],
        resistances: ['cold', 'physical']
    },
    {
        id: 'cave_spider',
        name: 'Cave Spider',
        emoji: 'üï∑Ô∏è',
        description: 'A large arachnid that weaves sticky webs in dark caverns',
        baseStats: {
            hp: 65,
            atk: 15,
            def: 5,
            spd: 22
        },
        rewards: {
            xp: 10,
            coins: 6
        },
        habitat: ['gathering', 'hunting', 'errand'],
        combatStyle: 'tactical',
        specialAbilities: [
            {
                name: 'Web Shot',
                chance: 0.20,
                description: 'Shoots web to slow down the player',
                effect: 'speed_debuff'
            },
            {
                name: 'Poison Bite',
                chance: 0.10,
                description: 'Venomous bite that deals damage over time',
                effect: 'poison'
            }
        ],
        weaknesses: ['fire', 'wind'],
        resistances: ['poison', 'dark']
    },
    {
        id: 'angry_boar',
        name: 'Angry Boar',
        emoji: 'üêó',
        description: 'A massive wild boar with razor-sharp tusks and a bad temper',
        baseStats: {
            hp: 110,
            atk: 22,
            def: 14,
            spd: 8
        },
        rewards: {
            xp: 18,
            coins: 15
        },
        habitat: ['hunting', 'community', 'protection'],
        combatStyle: 'tank',
        specialAbilities: [
            {
                name: 'Tusked Charge',
                chance: 0.25,
                description: 'Charges forward with deadly tusks',
                effect: 'high_damage'
            },
            {
                name: 'Thick Hide',
                chance: 0.15,
                description: 'Reduces incoming damage temporarily',
                effect: 'defense_buff'
            }
        ],
        weaknesses: ['agility', 'ranged'],
        resistances: ['physical', 'earth']
    },
    {
        id: 'marsh_slime',
        name: 'Marsh Slime',
        emoji: 'üü¢',
        description: 'A gelatinous creature that absorbs attacks and splits when damaged',
        baseStats: {
            hp: 95,
            atk: 10,
            def: 3,
            spd: 6
        },
        rewards: {
            xp: 11,
            coins: 7
        },
        habitat: ['gathering', 'errand', 'community'],
        combatStyle: 'defensive',
        specialAbilities: [
            {
                name: 'Absorb',
                chance: 0.20,
                description: 'Absorbs some damage and heals slightly',
                effect: 'heal'
            },
            {
                name: 'Acid Spit',
                chance: 0.15,
                description: 'Spits corrosive acid',
                effect: 'armor_debuff'
            }
        ],
        weaknesses: ['fire', 'salt'],
        resistances: ['physical', 'water', 'poison']
    },

    // Humanoid Enemies
    {
        id: 'bandit_thief',
        name: 'Bandit Thief',
        emoji: 'üó°Ô∏è',
        description: 'A desperate thief with quick hands and quicker feet',
        baseStats: {
            hp: 80,
            atk: 18,
            def: 10,
            spd: 16
        },
        rewards: {
            xp: 14,
            coins: 12
        },
        habitat: ['delivery', 'protection', 'errand'],
        combatStyle: 'agile',
        specialAbilities: [
            {
                name: 'Steal',
                chance: 0.10,
                description: 'Attempts to steal coins during combat',
                effect: 'coin_steal'
            },
            {
                name: 'Smoke Bomb',
                chance: 0.12,
                description: 'Throws smoke bomb to confuse',
                effect: 'accuracy_debuff'
            }
        ],
        weaknesses: ['surprise', 'heavy_armor'],
        resistances: ['stealth', 'agility']
    },
    {
        id: 'rogue_merchant',
        name: 'Rogue Merchant',
        emoji: 'üí∞',
        description: 'A crooked trader who cheats customers and fights dirty',
        baseStats: {
            hp: 70,
            atk: 14,
            def: 8,
            spd: 12
        },
        rewards: {
            xp: 12,
            coins: 20
        },
        habitat: ['delivery', 'errand', 'community'],
        combatStyle: 'defensive',
        specialAbilities: [
            {
                name: 'Bribe Attempt',
                chance: 0.08,
                description: 'Tries to bribe you to stop fighting',
                effect: 'confusion'
            },
            {
                name: 'Hidden Weapon',
                chance: 0.18,
                description: 'Pulls out a concealed dagger',
                effect: 'surprise_attack'
            }
        ],
        weaknesses: ['intimidation', 'justice'],
        resistances: ['charm', 'deception']
    },
    {
        id: 'corrupted_guard',
        name: 'Corrupted Guard',
        emoji: 'üõ°Ô∏è',
        description: 'A former protector now twisted by greed and power',
        baseStats: {
            hp: 100,
            atk: 19,
            def: 16,
            spd: 10
        },
        rewards: {
            xp: 16,
            coins: 18
        },
        habitat: ['protection', 'delivery', 'community'],
        combatStyle: 'balanced',
        specialAbilities: [
            {
                name: 'Shield Bash',
                chance: 0.20,
                description: 'Strikes with heavy shield',
                effect: 'stun'
            },
            {
                name: 'Authority',
                chance: 0.10,
                description: 'Uses commanding presence to intimidate',
                effect: 'fear'
            }
        ],
        weaknesses: ['justice', 'truth'],
        resistances: ['physical', 'intimidation']
    },

    // Magical/Mystical Creatures
    {
        id: 'will_o_wisp',
        name: 'Will-o\'-Wisp',
        emoji: 'üîÆ',
        description: 'A mysterious floating light that leads travelers astray',
        baseStats: {
            hp: 50,
            atk: 16,
            def: 2,
            spd: 25
        },
        rewards: {
            xp: 13,
            coins: 8
        },
        habitat: ['gathering', 'errand', 'training'],
        combatStyle: 'evasive',
        specialAbilities: [
            {
                name: 'Confuse',
                chance: 0.25,
                description: 'Creates illusions to confuse the target',
                effect: 'confusion'
            },
            {
                name: 'Phase',
                chance: 0.20,
                description: 'Becomes temporarily incorporeal',
                effect: 'dodge_buff'
            }
        ],
        weaknesses: ['light', 'dispel'],
        resistances: ['physical', 'dark', 'illusion']
    },
    {
        id: 'animated_scarecrow',
        name: 'Animated Scarecrow',
        emoji: 'üéÉ',
        description: 'A farm guardian brought to life by wild magic',
        baseStats: {
            hp: 90,
            atk: 15,
            def: 12,
            spd: 7
        },
        rewards: {
            xp: 14,
            coins: 9
        },
        habitat: ['community', 'gathering', 'protection'],
        combatStyle: 'defensive',
        specialAbilities: [
            {
                name: 'Frighten',
                chance: 0.18,
                description: 'Lets out a terrifying shriek',
                effect: 'fear'
            },
            {
                name: 'Straw Shield',
                chance: 0.15,
                description: 'Straw body absorbs some damage',
                effect: 'damage_reduction'
            }
        ],
        weaknesses: ['fire', 'dispel'],
        resistances: ['physical', 'fear']
    },

    // Constructed/Artificial Enemies  
    {
        id: 'training_dummy_golem',
        name: 'Training Dummy Golem',
        emoji: 'ü™®',
        description: 'An enchanted practice dummy that gained consciousness',
        baseStats: {
            hp: 120,
            atk: 12,
            def: 18,
            spd: 5
        },
        rewards: {
            xp: 16,
            coins: 5
        },
        habitat: ['training'],
        combatStyle: 'tank',
        specialAbilities: [
            {
                name: 'Repair',
                chance: 0.15,
                description: 'Magically repairs minor damage',
                effect: 'heal'
            },
            {
                name: 'Heavy Slam',
                chance: 0.20,
                description: 'Powerful but slow attack',
                effect: 'knockback'
            }
        ],
        weaknesses: ['magic', 'dispel'],
        resistances: ['physical', 'fear', 'poison']
    },
    {
        id: 'broken_automaton',
        name: 'Broken Automaton',
        emoji: '‚öôÔ∏è',
        description: 'A malfunctioning mechanical servant with erratic behavior',
        baseStats: {
            hp: 85,
            atk: 17,
            def: 13,
            spd: 11
        },
        rewards: {
            xp: 15,
            coins: 14
        },
        habitat: ['delivery', 'errand', 'community'],
        combatStyle: 'erratic',
        specialAbilities: [
            {
                name: 'Malfunction',
                chance: 0.20,
                description: 'Random unpredictable action',
                effect: 'random'
            },
            {
                name: 'Spark Discharge',
                chance: 0.12,
                description: 'Releases electrical energy',
                effect: 'stun'
            }
        ],
        weaknesses: ['water', 'disruption'],
        resistances: ['poison', 'fear', 'charm']
    },

    // Flying/Aerial Enemies
    {
        id: 'cave_bat_swarm',
        name: 'Cave Bat Swarm',
        emoji: 'ü¶á',
        description: 'A chaotic swarm of bats disturbed from their roost',
        baseStats: {
            hp: 60,
            atk: 13,
            def: 4,
            spd: 20
        },
        rewards: {
            xp: 9,
            coins: 6
        },
        habitat: ['gathering', 'hunting', 'errand'],
        combatStyle: 'swarm',
        specialAbilities: [
            {
                name: 'Swarm Attack',
                chance: 0.25,
                description: 'Multiple quick strikes',
                effect: 'multi_attack'
            },
            {
                name: 'Echolocation',
                chance: 0.15,
                description: 'Cannot be blinded or confused easily',
                effect: 'debuff_immunity'
            }
        ],
        weaknesses: ['area_attack', 'loud_noise'],
        resistances: ['single_target', 'dark']
    },
    {
        id: 'carrion_crow',
        name: 'Carrion Crow',
        emoji: 'üê¶‚Äç‚¨õ',
        description: 'An unusually large and aggressive scavenger bird',
        baseStats: {
            hp: 55,
            atk: 14,
            def: 6,
            spd: 19
        },
        rewards: {
            xp: 8,
            coins: 5
        },
        habitat: ['gathering', 'community', 'errand'],
        combatStyle: 'hit_and_run',
        specialAbilities: [
            {
                name: 'Dive Bomb',
                chance: 0.22,
                description: 'High-speed aerial attack',
                effect: 'high_damage'
            },
            {
                name: 'Caw',
                chance: 0.10,
                description: 'Loud cry that may attract more enemies',
                effect: 'summon_chance'
            }
        ],
        weaknesses: ['ranged', 'nets'],
        resistances: ['melee', 'ground_effects']
    }
];

// Enhanced enemy selection with better category matching
function getRandomEnemyForCategory(category, excludeIds = []) {
    let availableEnemies = PHASE_1_ENEMIES.filter(enemy => 
        enemy.habitat.includes(category) && !excludeIds.includes(enemy.id)
    );
    
    if (availableEnemies.length === 0) {
        // Fallback to any enemy not in exclude list
        availableEnemies = PHASE_1_ENEMIES.filter(enemy => 
            !excludeIds.includes(enemy.id)
        );
    }
    
    return availableEnemies[Math.floor(Math.random() * availableEnemies.length)];
}

// Enhanced enemy scaling with combat style considerations
function scaleEnemyToLevel(enemy, playerLevel) {
    const baseScaleFactor = Math.max(0.5, (playerLevel - 1) / 4); // More gradual scaling
    
    // Different scaling based on combat style
    let hpMultiplier = 1.0;
    let atkMultiplier = 1.0;
    let defMultiplier = 1.0;
    let spdMultiplier = 1.0;
    
    switch (enemy.combatStyle) {
        case 'tank':
            hpMultiplier = 1.3;
            defMultiplier = 1.2;
            spdMultiplier = 0.8;
            break;
        case 'agile':
            spdMultiplier = 1.3;
            hpMultiplier = 0.9;
            defMultiplier = 0.9;
            break;
        case 'aggressive':
            atkMultiplier = 1.2;
            hpMultiplier = 0.95;
            defMultiplier = 0.9;
            break;
        case 'defensive':
            defMultiplier = 1.3;
            atkMultiplier = 0.9;
            break;
        case 'evasive':
            spdMultiplier = 1.4;
            hpMultiplier = 0.8;
            defMultiplier = 0.7;
            break;
        case 'swarm':
            atkMultiplier = 0.8;
            spdMultiplier = 1.2;
            hpMultiplier = 0.85;
            break;
        case 'erratic':
            // Random slight variations
            const variance = 0.1;
            hpMultiplier += (Math.random() - 0.5) * variance;
            atkMultiplier += (Math.random() - 0.5) * variance;
            defMultiplier += (Math.random() - 0.5) * variance;
            spdMultiplier += (Math.random() - 0.5) * variance;
            break;
    }
    
    const scaledHp = Math.floor(enemy.baseStats.hp * hpMultiplier + (baseScaleFactor * 25));
    const scaledAtk = Math.floor(enemy.baseStats.atk * atkMultiplier + (baseScaleFactor * 4));
    const scaledDef = Math.floor(enemy.baseStats.def * defMultiplier + (baseScaleFactor * 2));
    const scaledSpd = Math.floor(enemy.baseStats.spd * spdMultiplier + (baseScaleFactor * 2));
    
    return {
        ...enemy,
        stats: {
            hp: Math.max(1, scaledHp),
            max_hp: Math.max(1, scaledHp),
            atk: Math.max(1, scaledAtk),
            def: Math.max(0, scaledDef),
            spd: Math.max(1, scaledSpd)
        },
        rewards: {
            xp: Math.floor(enemy.rewards.xp + (baseScaleFactor * 4)),
            coins: Math.floor(enemy.rewards.coins + (baseScaleFactor * 3))
        }
    };
}

// Dynamic enemy encounter rate based on quest type and player level
function shouldTriggerEnemyEncounter(questCategory, playerLevel) {
    let baseRate = 0.30; // 30% base chance
    
    // Adjust rate based on quest category
    const categoryModifiers = {
        'hunting': 0.15,      // +15% for hunting quests
        'protection': 0.12,   // +12% for protection quests
        'gathering': 0.05,    // +5% for gathering quests
        'delivery': 0.08,     // +8% for delivery quests
        'errand': -0.05,      // -5% for simple errands
        'community': -0.08,   // -8% for community work
        'training': 0.20      // +20% for training (practice combat)
    };
    
    baseRate += categoryModifiers[questCategory] || 0;
    
    // Slight level scaling (higher level = more encounters)
    const levelModifier = (playerLevel - 1) * 0.02; // +2% per level above 1
    baseRate += levelModifier;
    
    // Ensure rate stays within reasonable bounds
    baseRate = Math.max(0.10, Math.min(0.55, baseRate));
    
    return Math.random() < baseRate;
}

// Enhanced combat calculation with special abilities
function calculateDamage(attackerAtk, defenderDef, combatModifiers = {}) {
    let baseDamage = Math.max(1, attackerAtk - defenderDef);
    
    // Apply combat modifiers
    if (combatModifiers.criticalHit) {
        baseDamage *= 1.5;
    }
    if (combatModifiers.specialAbility) {
        baseDamage *= (combatModifiers.damageMultiplier || 1.0);
    }
    if (combatModifiers.weakness) {
        baseDamage *= 1.3; // 30% more damage on weakness
    }
    if (combatModifiers.resistance) {
        baseDamage *= 0.7; // 30% less damage on resistance
    }
    
    // Random variance (80% to 120% of calculated damage)
    const variance = Math.random() * 0.4 + 0.8;
    return Math.floor(baseDamage * variance);
}

// Enhanced critical hit system with speed and combat style
function calculateCritChance(attackerSpd, defenderSpd, combatStyle = 'balanced') {
    const speedDiff = attackerSpd - defenderSpd;
    let baseCrit = 0.05; // 5% base crit chance
    
    // Combat style modifiers
    const styleModifiers = {
        'agile': 0.03,      // +3% crit
        'aggressive': 0.02,  // +2% crit
        'evasive': 0.04,    // +4% crit
        'hit_and_run': 0.05, // +5% crit
        'tank': -0.02,      // -2% crit
        'defensive': -0.01,  // -1% crit
        'balanced': 0        // no modifier
    };
    
    baseCrit += styleModifiers[combatStyle] || 0;
    
    // Speed difference bonus (1% per 2 speed difference)
    const speedBonus = Math.max(0, speedDiff * 0.005);
    baseCrit += speedBonus;
    
    // Cap at 30% maximum crit chance
    return Math.min(0.30, baseCrit);
}

function rollCriticalHit(critChance) {
    return Math.random() < critChance;
}

// Check if enemy should use special ability
function shouldUseSpecialAbility(enemy, turnCount = 1) {
    if (!enemy.specialAbilities || enemy.specialAbilities.length === 0) {
        return null;
    }
    
    // Higher chance to use abilities as combat goes on
    const turnBonus = Math.min(0.1, (turnCount - 1) * 0.02);
    
    for (const ability of enemy.specialAbilities) {
        const adjustedChance = ability.chance + turnBonus;
        if (Math.random() < adjustedChance) {
            return ability;
        }
    }
    
    return null;
}

// Get enemy by ID (useful for specific encounters)
function getEnemyById(enemyId) {
    return PHASE_1_ENEMIES.find(enemy => enemy.id === enemyId);
}

// Get enemies by habitat/category
function getEnemiesByHabitat(habitat) {
    return PHASE_1_ENEMIES.filter(enemy => enemy.habitat.includes(habitat));
}

// Get enemy difficulty rating (1-5 scale)
function getEnemyDifficulty(enemy) {
    const totalStats = enemy.baseStats.hp + enemy.baseStats.atk + enemy.baseStats.def + enemy.baseStats.spd;
    const abilityCount = enemy.specialAbilities ? enemy.specialAbilities.length : 0;
    
    let difficulty = 1;
    
    if (totalStats > 200) difficulty = 5;
    else if (totalStats > 170) difficulty = 4;
    else if (totalStats > 140) difficulty = 3;
    else if (totalStats > 110) difficulty = 2;
    
    // Special abilities increase difficulty
    difficulty = Math.min(5, difficulty + Math.floor(abilityCount / 2));
    
    return difficulty;
}

module.exports = {
    PHASE_1_ENEMIES,
    getRandomEnemyForCategory,
    scaleEnemyToLevel,
    shouldTriggerEnemyEncounter,
    calculateDamage,
    calculateCritChance,
    rollCriticalHit,
    shouldUseSpecialAbility,
    getEnemyById,
    getEnemiesByHabitat,
    getEnemyDifficulty
};