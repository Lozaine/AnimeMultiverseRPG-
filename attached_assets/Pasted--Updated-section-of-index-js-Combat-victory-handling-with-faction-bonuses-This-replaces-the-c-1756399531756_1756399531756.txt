// Updated section of index.js - Combat victory handling with faction bonuses
// This replaces the combat victory section in your button interaction handler

if (attackResult.enemyDefeated) {
    // Enemy defeated - victory!
    
    // Import the enhanced quest functions
    const { calculatePhase1SuccessRate, rollForItem, calculateQuestRewards } = require('./utils/quests');
    
    // Calculate quest success with faction bonuses
    const questSuccess = Math.random() < calculatePhase1SuccessRate(character.level, character.faction, quest.category);
    
    // Calculate quest rewards with faction bonuses
    const questRewards = calculateQuestRewards(quest, character.level, character.faction, questSuccess);
    let questXp = questRewards.xp;
    let questCoins = questRewards.coins;
    let itemReceived = null;
    
    // Roll for item with faction bonuses
    if (questSuccess) {
        itemReceived = rollForItem(quest, character.level, character.faction);
        if (itemReceived) {
            // Add item to inventory
            const inventoryResult = await addItemToInventory(userId, itemReceived.name, itemReceived.description, itemReceived.type, 1, 'combat');
            
            // Handle special item effects for immediate rewards (only if item was added successfully)
            if (!inventoryResult.inventoryFull) {
                if (itemReceived.type === 'currency') {
                    questCoins += 10;
                }
                if (itemReceived.type === 'boost') {
                    questXp += 3;
                }
            }
        }
    }
    
    const totalXp = questXp + enemy.rewards.xp;
    const totalCoins = questCoins + enemy.rewards.coins;
    const finalNewExp = character.experience + totalXp;
    const finalNewGold = character.gold + totalCoins;
    
    // Check for level up
    const levelUpData = checkLevelUp(character.level, character.experience, finalNewExp);
    
    // Update character
    if (levelUpData.leveledUp) {
        await updateCharacterProgress(
            userId, 
            finalNewExp, 
            finalNewGold, 
            levelUpData.newLevel,
            levelUpData.newStats.hp,
            levelUpData.newStats.max_hp,
            levelUpData.newStats.atk,
            levelUpData.newStats.def,
            levelUpData.newStats.spd,
            finalNewExp
        );
    } else {
        await updateCharacterProgress(userId, finalNewExp, finalNewGold, character.level);
    }
    
    // Clean up combat data
    delete global.activeCombats[combatKey];
    
    // Create victory embed with enhanced reward information
    const victoryEmbed = createVictoryEmbed(combatCharacter, enemy, questXp, questCoins);
    
    // Add faction bonus information to victory embed if bonuses were applied
    if (questRewards.bonusInfo && character.faction) {
        const { FACTIONS } = require('./utils/factions');
        const factionName = FACTIONS[character.faction]?.name || character.faction;
        
        victoryEmbed.addFields([
            {
                name: `${FACTIONS[character.faction]?.emoji || '⚔️'} ${factionName} Bonus!`,
                value: `Your faction training pays off!\n` +
                       `• Quest XP: ${questRewards.bonusInfo.originalXp} → ${questXp} (${questRewards.bonusInfo.xpMultiplier}x)\n` +
                       `• Quest Coins: ${questRewards.bonusInfo.originalCoins} → ${questCoins} (${questRewards.bonusInfo.coinMultiplier}x)\n` +
                       `• Item Chance: Enhanced (${questRewards.bonusInfo.itemMultiplier}x)`,
                inline: false
            }
        ]);
    }
    
    // Add level up information if applicable
    if (levelUpData.leveledUp) {
        victoryEmbed.addFields([
            { 
                name: '🆙 LEVEL UP!', 
                value: `You are now level ${levelUpData.newLevel}!\n` +
                       `+${levelUpData.hpGained} HP (${levelUpData.newStats.max_hp} total)\n` +
                       `+${levelUpData.atkGained} ATK (${levelUpData.newStats.atk} total)\n` +
                       `+${levelUpData.defGained} DEF (${levelUpData.newStats.def} total)\n` +
                       `+${levelUpData.spdGained} SPD (${levelUpData.newStats.spd} total)`, 
                inline: false 
            }
        ]);
    }
    
    return interaction.update({ embeds: [victoryEmbed], components: [] });
}