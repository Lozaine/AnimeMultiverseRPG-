Perfect — since you're using **Discord.js**, **Node.js**, and **SQLite**, I’ll break down **how to make buffs and consumable effects actually “work”** and how to **track their status** for your bot.

---

## ✅ **How to Apply Buffs/Consumables in Your Bot**

To make buffs (like temporary +5 Attack) or consumables (like healing food) take effect, your bot needs to:

1. **Track who has the buff/effect**
2. **Apply that effect in the next quest or action**
3. **Expire the effect** after use or a time limit

---

### 🧱 Database Table for Active Effects

Create a new table in your SQLite database for active effects:

```sql
CREATE TABLE user_effects (
  user_id TEXT,
  effect_name TEXT,
  effect_type TEXT,       -- e.g., 'buff', 'healing', 'crafting_item'
  value INTEGER,          -- e.g., +5
  expires_at INTEGER,     -- Unix timestamp (optional if effect lasts 1 use)
  uses_left INTEGER       -- Optional: usually 1 for buffs
);
```

> You could also store as JSON if you’re keeping effects more dynamic.

---

### 🔁 Flow Example: Buff Usage

#### 1. 🎁 **User receives a buff**

Let’s say they get a **Minor Attack Charm** from a quest result.

```js
await db.run(
  `INSERT INTO user_effects (user_id, effect_name, effect_type, value, uses_left) VALUES (?, ?, ?, ?, ?)`,
  [user.id, 'Minor Attack Charm', 'attack_buff', 5, 1]
);
```

#### 2. 🗡️ **User starts a quest**

In your `/quest` command logic, **before calculating results**, check for any active buffs:

```js
const buffs = await db.all(
  `SELECT * FROM user_effects WHERE user_id = ? AND uses_left > 0`,
  [user.id]
);

let attackBonus = 0;
for (const buff of buffs) {
  if (buff.effect_type === 'attack_buff') {
    attackBonus += buff.value;
  }
}
```

Now, apply `attackBonus` when determining damage or success chances.

---

#### 3. 🧼 **After Quest: Mark Buff as Used**

If the buff is meant to last **one use**, reduce `uses_left` or delete it:

```js
await db.run(
  `UPDATE user_effects SET uses_left = uses_left - 1 WHERE user_id = ? AND effect_type = 'attack_buff'`,
  [user.id]
);
```

And clean up expired ones:

```js
await db.run(
  `DELETE FROM user_effects WHERE user_id = ? AND uses_left <= 0`
);
```

---

### 🥣 Flow Example: Healing Item

1. **User uses item** (e.g. `/use onigiri`)
2. Your bot heals them based on the item data
3. Update HP value in your `user_stats` table

```js
await db.run(`UPDATE user_stats SET hp = MIN(max_hp, hp + 15) WHERE user_id = ?`, [user.id]);
```

---

### 🔍 Debugging Tip: Log Effects in Discord

Whenever a buff is applied or takes effect, log it in chat or as part of your quest result embed:

```js
const effectStr = buffs.length > 0 ? `🛡️ Buff Active: +${attackBonus} Attack` : '';
```

Then include that in your embed footer or description.

---

## 🧪 Sample Output: `/quest` Embed Result

Here’s a mock result you could use:

```js
new EmbedBuilder()
  .setTitle('🦊 Quest Complete: Wild Boar Hunt')
  .setColor(0xFFD166)
  .addFields(
    { name: 'XP Gained', value: `+16 XP`, inline: true },
    { name: 'Coins Found', value: `+22 🪙`, inline: true },
    { name: 'Loot', value: `🍖 Raw Boar Meat x1`, inline: true },
  )
  .setFooter({ text: '🛡️ Buff Active: +5 Attack (Minor Charm)' });
```

---

## ✅ Summary

| Feature         | What to Do                                            |
| --------------- | ----------------------------------------------------- |
| Buff tracking   | Store in a `user_effects` table                       |
| Apply on quest  | Read active buffs and modify quest result accordingly |
| Expire buff     | Use `uses_left` or a time-based expiration            |
| Use healing     | Add to `/use` command, update `user_stats`            |
| Visual feedback | Display effects in quest results/embed footer         |

---
